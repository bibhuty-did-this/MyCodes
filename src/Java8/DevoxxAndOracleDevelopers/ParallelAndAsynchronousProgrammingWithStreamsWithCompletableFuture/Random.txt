// We solve one set of problems only to create a new set of problem

// Java 1 - Threads
// Java 5 - ExecutorService(Pool induced deadlock)
// Java 7 - ForkJoinPool(Used by Java8 parallel stream to solve the problem and generally uses CommonForkJoinPool)

// Some methods are ordered and some are not and there is a possibility that they have an ordered counterpart

// How many thread can I create ? -- Bad question
// How many thread should I create ? -- Correct question

// Computation Intensive vs IO Intensive:
// - For Computation Intensive: #Threads <= #Cores
// - For IO Intensive: #Threads may be greater than #Cores
// - #T <= (#Cores/(1-blocking factor))
// - NOTE: This is the number of threads that could be created by the operation not we should create

// Case when parallel makes no sense
// - findFirst(as it is ordered by default, no matter what you do you'll get the first value)
// - finaAny(as it'll give a result depending on thread, there's no consistency)
// - Also, in many cases the computation increases in case of parallel stream for getting a
//   simple work done. As streams work lazily, so there are chances that it'll calculate many
//   values in parallel before calculating the findFirst in many cases