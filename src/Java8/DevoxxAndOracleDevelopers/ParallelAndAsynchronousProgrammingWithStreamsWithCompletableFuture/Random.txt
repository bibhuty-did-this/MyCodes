// We solve one set of problems only to create a new set of problem

// Java 1 - Threads
// Java 5 - ExecutorService(Pool induced deadlock)
// Java 7 - ForkJoinPool(Used by Java8 parallel stream to solve the problem and generally uses CommonForkJoinPool)

// Some methods are ordered and some are not and there is a possibility that they have an ordered counterpart

// How many thread can I create ? -- Bad question
// How many thread should I create ? -- Correct question

// Computation Intensive vs IO Intensive:
// - For Computation Intensive: #Threads <= #Cores
// - For IO Intensive: #Threads may be greater than #Cores
// - #T <= (#Cores/(1-blocking factor))
// - NOTE: This is the number of threads that could be created by the operation not we should create

// Case when parallel makes no sense
// - findFirst(as it is ordered by default, no matter what you do you'll get the first value)
// - finaAny(as it'll give a result depending on thread, there's no consistency)
// - Also, in many cases the computation increases in case of parallel stream for getting a
//   simple work done. As streams work lazily, so there are chances that it'll calculate many
//   values in parallel before calculating the findFirst in many cases

// Drawbacks of future:
// - When you want to work with future you make a call and the call gives you a future
//   but to get it you need to call `future.get()` which is a blocking operation, and
//   you are stuck(say, you have no future at all). So it is not a good idea in many cases.

// Exception handling and functional programming are mutually exclusive. You don't do
// exceptions with functional programming.

// CompletableFuture has stages, which are nothing but pipeline of execution, i.e. you
// can go from one stage to another stage to another stage in completable future. And it
// is to be noted that every stage in completable future actually returns a completable
// future in turn.

// Famous or popular functional interface           Streams             CompletableFuture
// - Supplier<T> T get                            - factories           - supplyAsync
// - Predicate<T> boolean test(T)                 - filter
// - Function<T,R> R apply(T)                     - map
// - Consumer<T> void accept(T)                   - forEach             - thenAccept

// CompletableFutures are immortal as they never die, i.e every stage returns a CompletableFuture

//                  Streams vs/and Completable Future
//        Streams                         Completable Future
//        ----------------------          ----------------------------
//
//        zero, one or more data          at most have one data or error
//
//        only data channel               data channel and error channel
//
//        lazy                            lazy
//
//        forEach - Consumer              thenAccept(just as accept)
//        accept
//
//        map - Function                  thenApply(just as apply)
//        apply
//
//        reduce                          thenCombine
//
//        flatMap
//
//        exception - oops                exception - error channel

// Completable future has 3 states: resolved, reject, pending
// The question is how long you could be in `pending` state ? That needs to be resolved
// Solution: Both in life and programming, never do something without timeout

// In case of streams:
//  - function returns data: map
//  - function returns Stream: flatMap
// In case of CompletableFuture:
//  - function returns data: thenAccept/thenApply
//  - function returns CompletableFuture: thenCompose